// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package media.bcc.bccm_player.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class ChromecastControllerPigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CastSessionUnavailableEvent {
    private @Nullable Long playbackPositionMs;

    public @Nullable Long getPlaybackPositionMs() {
      return playbackPositionMs;
    }

    public void setPlaybackPositionMs(@Nullable Long setterArg) {
      this.playbackPositionMs = setterArg;
    }

    public static final class Builder {

      private @Nullable Long playbackPositionMs;

      public @NonNull Builder setPlaybackPositionMs(@Nullable Long setterArg) {
        this.playbackPositionMs = setterArg;
        return this;
      }

      public @NonNull CastSessionUnavailableEvent build() {
        CastSessionUnavailableEvent pigeonReturn = new CastSessionUnavailableEvent();
        pigeonReturn.setPlaybackPositionMs(playbackPositionMs);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(playbackPositionMs);
      return toListResult;
    }

    static @NonNull CastSessionUnavailableEvent fromList(@NonNull ArrayList<Object> list) {
      CastSessionUnavailableEvent pigeonResult = new CastSessionUnavailableEvent();
      Object playbackPositionMs = list.get(0);
      pigeonResult.setPlaybackPositionMs((playbackPositionMs == null) ? null : ((playbackPositionMs instanceof Integer) ? (Integer) playbackPositionMs : (Long) playbackPositionMs));
      return pigeonResult;
    }
  }

  private static class ChromecastPigeonCodec extends StandardMessageCodec {
    public static final ChromecastPigeonCodec INSTANCE = new ChromecastPigeonCodec();

    private ChromecastPigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return CastSessionUnavailableEvent.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof CastSessionUnavailableEvent) {
        stream.write(128);
        writeValue(stream, ((CastSessionUnavailableEvent) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class ChromecastPigeon {
    private final @NonNull BinaryMessenger binaryMessenger;

    public ChromecastPigeon(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by ChromecastPigeon. */
    static @NonNull MessageCodec<Object> getCodec() {
      return ChromecastPigeonCodec.INSTANCE;
    }
    public void onSessionEnded(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionEnded", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionEnding(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionEnding", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionResumeFailed(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionResumeFailed", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionResumed(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionResumed", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionResuming(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionResuming", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionStartFailed(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionStartFailed", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionStarted(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionStarted", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionStarting(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionStarting", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onSessionSuspended(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionSuspended", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onCastSessionAvailable(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onCastSessionAvailable", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void onCastSessionUnavailable(@NonNull CastSessionUnavailableEvent eventArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onCastSessionUnavailable", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(eventArg)),
          channelReply -> callback.reply(null));
    }
  }
}
