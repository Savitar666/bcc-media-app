// Autogenerated from Pigeon (v3.2.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package media.bcc.player;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class ChromecastControllerPigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CastSessionUnavailableEvent {
    private @Nullable Long playbackPositionMs;
    public @Nullable Long getPlaybackPositionMs() { return playbackPositionMs; }
    public void setPlaybackPositionMs(@Nullable Long setterArg) {
      this.playbackPositionMs = setterArg;
    }

    public static final class Builder {
      private @Nullable Long playbackPositionMs;
      public @NonNull Builder setPlaybackPositionMs(@Nullable Long setterArg) {
        this.playbackPositionMs = setterArg;
        return this;
      }
      public @NonNull CastSessionUnavailableEvent build() {
        CastSessionUnavailableEvent pigeonReturn = new CastSessionUnavailableEvent();
        pigeonReturn.setPlaybackPositionMs(playbackPositionMs);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("playbackPositionMs", playbackPositionMs);
      return toMapResult;
    }
    static @NonNull CastSessionUnavailableEvent fromMap(@NonNull Map<String, Object> map) {
      CastSessionUnavailableEvent pigeonResult = new CastSessionUnavailableEvent();
      Object playbackPositionMs = map.get("playbackPositionMs");
      pigeonResult.setPlaybackPositionMs((playbackPositionMs == null) ? null : ((playbackPositionMs instanceof Integer) ? (Integer)playbackPositionMs : (Long)playbackPositionMs));
      return pigeonResult;
    }
  }
  private static class ChromecastPigeonCodec extends StandardMessageCodec {
    public static final ChromecastPigeonCodec INSTANCE = new ChromecastPigeonCodec();
    private ChromecastPigeonCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CastSessionUnavailableEvent.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CastSessionUnavailableEvent) {
        stream.write(128);
        writeValue(stream, ((CastSessionUnavailableEvent) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class ChromecastPigeon {
    private final BinaryMessenger binaryMessenger;
    public ChromecastPigeon(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return ChromecastPigeonCodec.INSTANCE;
    }

    public void onSessionEnded(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionEnded", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionEnding(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionEnding", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionResumeFailed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionResumeFailed", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionResumed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionResumed", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionResuming(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionResuming", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionStartFailed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionStartFailed", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionStarted(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionStarted", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionStarting(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionStarting", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSessionSuspended(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onSessionSuspended", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onCastSessionAvailable(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onCastSessionAvailable", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onCastSessionUnavailable(@NonNull CastSessionUnavailableEvent eventArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChromecastPigeon.onCastSessionUnavailable", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(eventArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
