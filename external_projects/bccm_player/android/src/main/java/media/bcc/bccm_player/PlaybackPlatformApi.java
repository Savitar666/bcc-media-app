// Autogenerated from Pigeon (v9.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package media.bcc.bccm_player;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class PlaybackPlatformApi {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  public enum CastConnectionState {
    _(0),
    NO_DEVICES_AVAILABLE(1),
    NOT_CONNECTED(2),
    CONNECTING(3),
    CONNECTED(4);

    private final int index;

    private CastConnectionState(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NpawConfig {
    private @Nullable String appName;

    public @Nullable String getAppName() {
      return appName;
    }

    public void setAppName(@Nullable String setterArg) {
      this.appName = setterArg;
    }

    private @Nullable String appReleaseVersion;

    public @Nullable String getAppReleaseVersion() {
      return appReleaseVersion;
    }

    public void setAppReleaseVersion(@Nullable String setterArg) {
      this.appReleaseVersion = setterArg;
    }

    private @Nullable String accountCode;

    public @Nullable String getAccountCode() {
      return accountCode;
    }

    public void setAccountCode(@Nullable String setterArg) {
      this.accountCode = setterArg;
    }

    public static final class Builder {

      private @Nullable String appName;

      public @NonNull Builder setAppName(@Nullable String setterArg) {
        this.appName = setterArg;
        return this;
      }

      private @Nullable String appReleaseVersion;

      public @NonNull Builder setAppReleaseVersion(@Nullable String setterArg) {
        this.appReleaseVersion = setterArg;
        return this;
      }

      private @Nullable String accountCode;

      public @NonNull Builder setAccountCode(@Nullable String setterArg) {
        this.accountCode = setterArg;
        return this;
      }

      public @NonNull NpawConfig build() {
        NpawConfig pigeonReturn = new NpawConfig();
        pigeonReturn.setAppName(appName);
        pigeonReturn.setAppReleaseVersion(appReleaseVersion);
        pigeonReturn.setAccountCode(accountCode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(appName);
      toListResult.add(appReleaseVersion);
      toListResult.add(accountCode);
      return toListResult;
    }

    static @NonNull NpawConfig fromList(@NonNull ArrayList<Object> list) {
      NpawConfig pigeonResult = new NpawConfig();
      Object appName = list.get(0);
      pigeonResult.setAppName((String) appName);
      Object appReleaseVersion = list.get(1);
      pigeonResult.setAppReleaseVersion((String) appReleaseVersion);
      Object accountCode = list.get(2);
      pigeonResult.setAccountCode((String) accountCode);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AppConfig {
    private @Nullable String appLanguage;

    public @Nullable String getAppLanguage() {
      return appLanguage;
    }

    public void setAppLanguage(@Nullable String setterArg) {
      this.appLanguage = setterArg;
    }

    private @Nullable String audioLanguage;

    public @Nullable String getAudioLanguage() {
      return audioLanguage;
    }

    public void setAudioLanguage(@Nullable String setterArg) {
      this.audioLanguage = setterArg;
    }

    private @Nullable String subtitleLanguage;

    public @Nullable String getSubtitleLanguage() {
      return subtitleLanguage;
    }

    public void setSubtitleLanguage(@Nullable String setterArg) {
      this.subtitleLanguage = setterArg;
    }

    private @Nullable String analyticsId;

    public @Nullable String getAnalyticsId() {
      return analyticsId;
    }

    public void setAnalyticsId(@Nullable String setterArg) {
      this.analyticsId = setterArg;
    }

    private @Nullable Long sessionId;

    public @Nullable Long getSessionId() {
      return sessionId;
    }

    public void setSessionId(@Nullable Long setterArg) {
      this.sessionId = setterArg;
    }

    public static final class Builder {

      private @Nullable String appLanguage;

      public @NonNull Builder setAppLanguage(@Nullable String setterArg) {
        this.appLanguage = setterArg;
        return this;
      }

      private @Nullable String audioLanguage;

      public @NonNull Builder setAudioLanguage(@Nullable String setterArg) {
        this.audioLanguage = setterArg;
        return this;
      }

      private @Nullable String subtitleLanguage;

      public @NonNull Builder setSubtitleLanguage(@Nullable String setterArg) {
        this.subtitleLanguage = setterArg;
        return this;
      }

      private @Nullable String analyticsId;

      public @NonNull Builder setAnalyticsId(@Nullable String setterArg) {
        this.analyticsId = setterArg;
        return this;
      }

      private @Nullable Long sessionId;

      public @NonNull Builder setSessionId(@Nullable Long setterArg) {
        this.sessionId = setterArg;
        return this;
      }

      public @NonNull AppConfig build() {
        AppConfig pigeonReturn = new AppConfig();
        pigeonReturn.setAppLanguage(appLanguage);
        pigeonReturn.setAudioLanguage(audioLanguage);
        pigeonReturn.setSubtitleLanguage(subtitleLanguage);
        pigeonReturn.setAnalyticsId(analyticsId);
        pigeonReturn.setSessionId(sessionId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(appLanguage);
      toListResult.add(audioLanguage);
      toListResult.add(subtitleLanguage);
      toListResult.add(analyticsId);
      toListResult.add(sessionId);
      return toListResult;
    }

    static @NonNull AppConfig fromList(@NonNull ArrayList<Object> list) {
      AppConfig pigeonResult = new AppConfig();
      Object appLanguage = list.get(0);
      pigeonResult.setAppLanguage((String) appLanguage);
      Object audioLanguage = list.get(1);
      pigeonResult.setAudioLanguage((String) audioLanguage);
      Object subtitleLanguage = list.get(2);
      pigeonResult.setSubtitleLanguage((String) subtitleLanguage);
      Object analyticsId = list.get(3);
      pigeonResult.setAnalyticsId((String) analyticsId);
      Object sessionId = list.get(4);
      pigeonResult.setSessionId((sessionId == null) ? null : ((sessionId instanceof Integer) ? (Integer) sessionId : (Long) sessionId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class User {
    private @Nullable String id;

    public @Nullable String getId() {
      return id;
    }

    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }

      public @NonNull User build() {
        User pigeonReturn = new User();
        pigeonReturn.setId(id);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(id);
      return toListResult;
    }

    static @NonNull User fromList(@NonNull ArrayList<Object> list) {
      User pigeonResult = new User();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MediaItem {
    private @Nullable String url;

    public @Nullable String getUrl() {
      return url;
    }

    public void setUrl(@Nullable String setterArg) {
      this.url = setterArg;
    }

    private @Nullable String mimeType;

    public @Nullable String getMimeType() {
      return mimeType;
    }

    public void setMimeType(@Nullable String setterArg) {
      this.mimeType = setterArg;
    }

    private @Nullable MediaMetadata metadata;

    public @Nullable MediaMetadata getMetadata() {
      return metadata;
    }

    public void setMetadata(@Nullable MediaMetadata setterArg) {
      this.metadata = setterArg;
    }

    private @Nullable Boolean isLive;

    public @Nullable Boolean getIsLive() {
      return isLive;
    }

    public void setIsLive(@Nullable Boolean setterArg) {
      this.isLive = setterArg;
    }

    private @Nullable Double playbackStartPositionMs;

    public @Nullable Double getPlaybackStartPositionMs() {
      return playbackStartPositionMs;
    }

    public void setPlaybackStartPositionMs(@Nullable Double setterArg) {
      this.playbackStartPositionMs = setterArg;
    }

    private @Nullable String lastKnownAudioLanguage;

    public @Nullable String getLastKnownAudioLanguage() {
      return lastKnownAudioLanguage;
    }

    public void setLastKnownAudioLanguage(@Nullable String setterArg) {
      this.lastKnownAudioLanguage = setterArg;
    }

    private @Nullable String lastKnownSubtitleLanguage;

    public @Nullable String getLastKnownSubtitleLanguage() {
      return lastKnownSubtitleLanguage;
    }

    public void setLastKnownSubtitleLanguage(@Nullable String setterArg) {
      this.lastKnownSubtitleLanguage = setterArg;
    }

    public static final class Builder {

      private @Nullable String url;

      public @NonNull Builder setUrl(@Nullable String setterArg) {
        this.url = setterArg;
        return this;
      }

      private @Nullable String mimeType;

      public @NonNull Builder setMimeType(@Nullable String setterArg) {
        this.mimeType = setterArg;
        return this;
      }

      private @Nullable MediaMetadata metadata;

      public @NonNull Builder setMetadata(@Nullable MediaMetadata setterArg) {
        this.metadata = setterArg;
        return this;
      }

      private @Nullable Boolean isLive;

      public @NonNull Builder setIsLive(@Nullable Boolean setterArg) {
        this.isLive = setterArg;
        return this;
      }

      private @Nullable Double playbackStartPositionMs;

      public @NonNull Builder setPlaybackStartPositionMs(@Nullable Double setterArg) {
        this.playbackStartPositionMs = setterArg;
        return this;
      }

      private @Nullable String lastKnownAudioLanguage;

      public @NonNull Builder setLastKnownAudioLanguage(@Nullable String setterArg) {
        this.lastKnownAudioLanguage = setterArg;
        return this;
      }

      private @Nullable String lastKnownSubtitleLanguage;

      public @NonNull Builder setLastKnownSubtitleLanguage(@Nullable String setterArg) {
        this.lastKnownSubtitleLanguage = setterArg;
        return this;
      }

      public @NonNull MediaItem build() {
        MediaItem pigeonReturn = new MediaItem();
        pigeonReturn.setUrl(url);
        pigeonReturn.setMimeType(mimeType);
        pigeonReturn.setMetadata(metadata);
        pigeonReturn.setIsLive(isLive);
        pigeonReturn.setPlaybackStartPositionMs(playbackStartPositionMs);
        pigeonReturn.setLastKnownAudioLanguage(lastKnownAudioLanguage);
        pigeonReturn.setLastKnownSubtitleLanguage(lastKnownSubtitleLanguage);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(url);
      toListResult.add(mimeType);
      toListResult.add((metadata == null) ? null : metadata.toList());
      toListResult.add(isLive);
      toListResult.add(playbackStartPositionMs);
      toListResult.add(lastKnownAudioLanguage);
      toListResult.add(lastKnownSubtitleLanguage);
      return toListResult;
    }

    static @NonNull MediaItem fromList(@NonNull ArrayList<Object> list) {
      MediaItem pigeonResult = new MediaItem();
      Object url = list.get(0);
      pigeonResult.setUrl((String) url);
      Object mimeType = list.get(1);
      pigeonResult.setMimeType((String) mimeType);
      Object metadata = list.get(2);
      pigeonResult.setMetadata((metadata == null) ? null : MediaMetadata.fromList((ArrayList<Object>) metadata));
      Object isLive = list.get(3);
      pigeonResult.setIsLive((Boolean) isLive);
      Object playbackStartPositionMs = list.get(4);
      pigeonResult.setPlaybackStartPositionMs((Double) playbackStartPositionMs);
      Object lastKnownAudioLanguage = list.get(5);
      pigeonResult.setLastKnownAudioLanguage((String) lastKnownAudioLanguage);
      Object lastKnownSubtitleLanguage = list.get(6);
      pigeonResult.setLastKnownSubtitleLanguage((String) lastKnownSubtitleLanguage);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MediaMetadata {
    private @Nullable String artworkUri;

    public @Nullable String getArtworkUri() {
      return artworkUri;
    }

    public void setArtworkUri(@Nullable String setterArg) {
      this.artworkUri = setterArg;
    }

    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String artist;

    public @Nullable String getArtist() {
      return artist;
    }

    public void setArtist(@Nullable String setterArg) {
      this.artist = setterArg;
    }

    private @Nullable String episodeId;

    public @Nullable String getEpisodeId() {
      return episodeId;
    }

    public void setEpisodeId(@Nullable String setterArg) {
      this.episodeId = setterArg;
    }

    private @Nullable Map<String, Object> extras;

    public @Nullable Map<String, Object> getExtras() {
      return extras;
    }

    public void setExtras(@Nullable Map<String, Object> setterArg) {
      this.extras = setterArg;
    }

    public static final class Builder {

      private @Nullable String artworkUri;

      public @NonNull Builder setArtworkUri(@Nullable String setterArg) {
        this.artworkUri = setterArg;
        return this;
      }

      private @Nullable String title;

      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String artist;

      public @NonNull Builder setArtist(@Nullable String setterArg) {
        this.artist = setterArg;
        return this;
      }

      private @Nullable String episodeId;

      public @NonNull Builder setEpisodeId(@Nullable String setterArg) {
        this.episodeId = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> extras;

      public @NonNull Builder setExtras(@Nullable Map<String, Object> setterArg) {
        this.extras = setterArg;
        return this;
      }

      public @NonNull MediaMetadata build() {
        MediaMetadata pigeonReturn = new MediaMetadata();
        pigeonReturn.setArtworkUri(artworkUri);
        pigeonReturn.setTitle(title);
        pigeonReturn.setArtist(artist);
        pigeonReturn.setEpisodeId(episodeId);
        pigeonReturn.setExtras(extras);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(artworkUri);
      toListResult.add(title);
      toListResult.add(artist);
      toListResult.add(episodeId);
      toListResult.add(extras);
      return toListResult;
    }

    static @NonNull MediaMetadata fromList(@NonNull ArrayList<Object> list) {
      MediaMetadata pigeonResult = new MediaMetadata();
      Object artworkUri = list.get(0);
      pigeonResult.setArtworkUri((String) artworkUri);
      Object title = list.get(1);
      pigeonResult.setTitle((String) title);
      Object artist = list.get(2);
      pigeonResult.setArtist((String) artist);
      Object episodeId = list.get(3);
      pigeonResult.setEpisodeId((String) episodeId);
      Object extras = list.get(4);
      pigeonResult.setExtras((Map<String, Object>) extras);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PlayerState {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull Boolean isPlaying;

    public @NonNull Boolean getIsPlaying() {
      return isPlaying;
    }

    public void setIsPlaying(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isPlaying\" is null.");
      }
      this.isPlaying = setterArg;
    }

    private @Nullable Double playbackPositionMs;

    public @Nullable Double getPlaybackPositionMs() {
      return playbackPositionMs;
    }

    public void setPlaybackPositionMs(@Nullable Double setterArg) {
      this.playbackPositionMs = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PlayerState() {}

    public static final class Builder {

      private @Nullable String playerId;

      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable Boolean isPlaying;

      public @NonNull Builder setIsPlaying(@NonNull Boolean setterArg) {
        this.isPlaying = setterArg;
        return this;
      }

      private @Nullable Double playbackPositionMs;

      public @NonNull Builder setPlaybackPositionMs(@Nullable Double setterArg) {
        this.playbackPositionMs = setterArg;
        return this;
      }

      public @NonNull PlayerState build() {
        PlayerState pigeonReturn = new PlayerState();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setIsPlaying(isPlaying);
        pigeonReturn.setPlaybackPositionMs(playbackPositionMs);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(playerId);
      toListResult.add(isPlaying);
      toListResult.add(playbackPositionMs);
      return toListResult;
    }

    static @NonNull PlayerState fromList(@NonNull ArrayList<Object> list) {
      PlayerState pigeonResult = new PlayerState();
      Object playerId = list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object isPlaying = list.get(1);
      pigeonResult.setIsPlaying((Boolean) isPlaying);
      Object playbackPositionMs = list.get(2);
      pigeonResult.setPlaybackPositionMs((Double) playbackPositionMs);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ChromecastState {
    private @NonNull CastConnectionState connectionState;

    public @NonNull CastConnectionState getConnectionState() {
      return connectionState;
    }

    public void setConnectionState(@NonNull CastConnectionState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"connectionState\" is null.");
      }
      this.connectionState = setterArg;
    }

    private @Nullable MediaItem mediaItem;

    public @Nullable MediaItem getMediaItem() {
      return mediaItem;
    }

    public void setMediaItem(@Nullable MediaItem setterArg) {
      this.mediaItem = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ChromecastState() {}

    public static final class Builder {

      private @Nullable CastConnectionState connectionState;

      public @NonNull Builder setConnectionState(@NonNull CastConnectionState setterArg) {
        this.connectionState = setterArg;
        return this;
      }

      private @Nullable MediaItem mediaItem;

      public @NonNull Builder setMediaItem(@Nullable MediaItem setterArg) {
        this.mediaItem = setterArg;
        return this;
      }

      public @NonNull ChromecastState build() {
        ChromecastState pigeonReturn = new ChromecastState();
        pigeonReturn.setConnectionState(connectionState);
        pigeonReturn.setMediaItem(mediaItem);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(connectionState == null ? null : connectionState.index);
      toListResult.add((mediaItem == null) ? null : mediaItem.toList());
      return toListResult;
    }

    static @NonNull ChromecastState fromList(@NonNull ArrayList<Object> list) {
      ChromecastState pigeonResult = new ChromecastState();
      Object connectionState = list.get(0);
      pigeonResult.setConnectionState(connectionState == null ? null : CastConnectionState.values()[(int) connectionState]);
      Object mediaItem = list.get(1);
      pigeonResult.setMediaItem((mediaItem == null) ? null : MediaItem.fromList((ArrayList<Object>) mediaItem));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PositionDiscontinuityEvent {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @Nullable Double playbackPositionMs;

    public @Nullable Double getPlaybackPositionMs() {
      return playbackPositionMs;
    }

    public void setPlaybackPositionMs(@Nullable Double setterArg) {
      this.playbackPositionMs = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PositionDiscontinuityEvent() {}

    public static final class Builder {

      private @Nullable String playerId;

      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable Double playbackPositionMs;

      public @NonNull Builder setPlaybackPositionMs(@Nullable Double setterArg) {
        this.playbackPositionMs = setterArg;
        return this;
      }

      public @NonNull PositionDiscontinuityEvent build() {
        PositionDiscontinuityEvent pigeonReturn = new PositionDiscontinuityEvent();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setPlaybackPositionMs(playbackPositionMs);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(playerId);
      toListResult.add(playbackPositionMs);
      return toListResult;
    }

    static @NonNull PositionDiscontinuityEvent fromList(@NonNull ArrayList<Object> list) {
      PositionDiscontinuityEvent pigeonResult = new PositionDiscontinuityEvent();
      Object playerId = list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object playbackPositionMs = list.get(1);
      pigeonResult.setPlaybackPositionMs((Double) playbackPositionMs);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class IsPlayingChangedEvent {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull Boolean isPlaying;

    public @NonNull Boolean getIsPlaying() {
      return isPlaying;
    }

    public void setIsPlaying(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isPlaying\" is null.");
      }
      this.isPlaying = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private IsPlayingChangedEvent() {}

    public static final class Builder {

      private @Nullable String playerId;

      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable Boolean isPlaying;

      public @NonNull Builder setIsPlaying(@NonNull Boolean setterArg) {
        this.isPlaying = setterArg;
        return this;
      }

      public @NonNull IsPlayingChangedEvent build() {
        IsPlayingChangedEvent pigeonReturn = new IsPlayingChangedEvent();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setIsPlaying(isPlaying);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(playerId);
      toListResult.add(isPlaying);
      return toListResult;
    }

    static @NonNull IsPlayingChangedEvent fromList(@NonNull ArrayList<Object> list) {
      IsPlayingChangedEvent pigeonResult = new IsPlayingChangedEvent();
      Object playerId = list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object isPlaying = list.get(1);
      pigeonResult.setIsPlaying((Boolean) isPlaying);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PictureInPictureModeChangedEvent {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull Boolean isInPipMode;

    public @NonNull Boolean getIsInPipMode() {
      return isInPipMode;
    }

    public void setIsInPipMode(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isInPipMode\" is null.");
      }
      this.isInPipMode = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PictureInPictureModeChangedEvent() {}

    public static final class Builder {

      private @Nullable String playerId;

      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable Boolean isInPipMode;

      public @NonNull Builder setIsInPipMode(@NonNull Boolean setterArg) {
        this.isInPipMode = setterArg;
        return this;
      }

      public @NonNull PictureInPictureModeChangedEvent build() {
        PictureInPictureModeChangedEvent pigeonReturn = new PictureInPictureModeChangedEvent();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setIsInPipMode(isInPipMode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(playerId);
      toListResult.add(isInPipMode);
      return toListResult;
    }

    static @NonNull PictureInPictureModeChangedEvent fromList(@NonNull ArrayList<Object> list) {
      PictureInPictureModeChangedEvent pigeonResult = new PictureInPictureModeChangedEvent();
      Object playerId = list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object isInPipMode = list.get(1);
      pigeonResult.setIsInPipMode((Boolean) isInPipMode);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MediaItemTransitionEvent {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @Nullable MediaItem mediaItem;

    public @Nullable MediaItem getMediaItem() {
      return mediaItem;
    }

    public void setMediaItem(@Nullable MediaItem setterArg) {
      this.mediaItem = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private MediaItemTransitionEvent() {}

    public static final class Builder {

      private @Nullable String playerId;

      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable MediaItem mediaItem;

      public @NonNull Builder setMediaItem(@Nullable MediaItem setterArg) {
        this.mediaItem = setterArg;
        return this;
      }

      public @NonNull MediaItemTransitionEvent build() {
        MediaItemTransitionEvent pigeonReturn = new MediaItemTransitionEvent();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setMediaItem(mediaItem);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(playerId);
      toListResult.add((mediaItem == null) ? null : mediaItem.toList());
      return toListResult;
    }

    static @NonNull MediaItemTransitionEvent fromList(@NonNull ArrayList<Object> list) {
      MediaItemTransitionEvent pigeonResult = new MediaItemTransitionEvent();
      Object playerId = list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object mediaItem = list.get(1);
      pigeonResult.setMediaItem((mediaItem == null) ? null : MediaItem.fromList((ArrayList<Object>) mediaItem));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);

    void error(Throwable error);
  }

  private static class PlaybackPlatformPigeonCodec extends StandardMessageCodec {
    public static final PlaybackPlatformPigeonCodec INSTANCE = new PlaybackPlatformPigeonCodec();

    private PlaybackPlatformPigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AppConfig.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return ChromecastState.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return MediaItem.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return MediaMetadata.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return NpawConfig.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PlayerState.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return User.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AppConfig) {
        stream.write(128);
        writeValue(stream, ((AppConfig) value).toList());
      } else if (value instanceof ChromecastState) {
        stream.write(129);
        writeValue(stream, ((ChromecastState) value).toList());
      } else if (value instanceof MediaItem) {
        stream.write(130);
        writeValue(stream, ((MediaItem) value).toList());
      } else if (value instanceof MediaMetadata) {
        stream.write(131);
        writeValue(stream, ((MediaMetadata) value).toList());
      } else if (value instanceof NpawConfig) {
        stream.write(132);
        writeValue(stream, ((NpawConfig) value).toList());
      } else if (value instanceof PlayerState) {
        stream.write(133);
        writeValue(stream, ((PlayerState) value).toList());
      } else if (value instanceof User) {
        stream.write(134);
        writeValue(stream, ((User) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PlaybackPlatformPigeon {

    void newPlayer(@Nullable String url, Result<String> result);

    void queueMediaItem(@NonNull String playerId, @NonNull MediaItem mediaItem, Result<Void> result);

    void replaceCurrentMediaItem(@NonNull String playerId, @NonNull MediaItem mediaItem, @Nullable Boolean playbackPositionFromPrimary, @Nullable Boolean autoplay, Result<Void> result);

    void setPlayerViewVisibility(@NonNull Long viewId, @NonNull Boolean visible);

    void setPrimary(@NonNull String id, Result<Void> result);

    void play(@NonNull String playerId);

    void pause(@NonNull String playerId);

    void stop(@NonNull String playerId, @NonNull Boolean reset);

    void setUser(@Nullable User user);

    void setNpawConfig(@Nullable NpawConfig config);

    void setAppConfig(@Nullable AppConfig config);

    void getPlayerState(@NonNull String playerId, Result<PlayerState> result);

    void getChromecastState(Result<ChromecastState> result);

    void openExpandedCastController();

    void openCastDialog();

    /** The codec used by PlaybackPlatformPigeon. */
    static MessageCodec<Object> getCodec() {
      return PlaybackPlatformPigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `PlaybackPlatformPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PlaybackPlatformPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.newPlayer", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String urlArg = (String) args.get(0);
                  Result<String> resultCallback = 
                      new Result<String>() {
                        public void success(String result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.newPlayer(urlArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.queueMediaItem", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  MediaItem mediaItemArg = (MediaItem) args.get(1);
                  if (mediaItemArg == null) {
                    throw new NullPointerException("mediaItemArg unexpectedly null.");
                  }
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.queueMediaItem(playerIdArg, mediaItemArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.replaceCurrentMediaItem", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  MediaItem mediaItemArg = (MediaItem) args.get(1);
                  if (mediaItemArg == null) {
                    throw new NullPointerException("mediaItemArg unexpectedly null.");
                  }
                  Boolean playbackPositionFromPrimaryArg = (Boolean) args.get(2);
                  Boolean autoplayArg = (Boolean) args.get(3);
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.replaceCurrentMediaItem(playerIdArg, mediaItemArg, playbackPositionFromPrimaryArg, autoplayArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.setPlayerViewVisibility", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number viewIdArg = (Number) args.get(0);
                  if (viewIdArg == null) {
                    throw new NullPointerException("viewIdArg unexpectedly null.");
                  }
                  Boolean visibleArg = (Boolean) args.get(1);
                  if (visibleArg == null) {
                    throw new NullPointerException("visibleArg unexpectedly null.");
                  }
                  api.setPlayerViewVisibility((viewIdArg == null) ? null : viewIdArg.longValue(), visibleArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.setPrimary", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String idArg = (String) args.get(0);
                  if (idArg == null) {
                    throw new NullPointerException("idArg unexpectedly null.");
                  }
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.setPrimary(idArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.play", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  api.play(playerIdArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  api.pause(playerIdArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.stop", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  Boolean resetArg = (Boolean) args.get(1);
                  if (resetArg == null) {
                    throw new NullPointerException("resetArg unexpectedly null.");
                  }
                  api.stop(playerIdArg, resetArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.setUser", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  User userArg = (User) args.get(0);
                  api.setUser(userArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.setNpawConfig", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  NpawConfig configArg = (NpawConfig) args.get(0);
                  api.setNpawConfig(configArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.setAppConfig", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  AppConfig configArg = (AppConfig) args.get(0);
                  api.setAppConfig(configArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.getPlayerState", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String playerIdArg = (String) args.get(0);
                  if (playerIdArg == null) {
                    throw new NullPointerException("playerIdArg unexpectedly null.");
                  }
                  Result<PlayerState> resultCallback = 
                      new Result<PlayerState>() {
                        public void success(PlayerState result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.getPlayerState(playerIdArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.getChromecastState", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<ChromecastState> resultCallback = 
                      new Result<ChromecastState>() {
                        public void success(ChromecastState result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.getChromecastState(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.openExpandedCastController", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.openExpandedCastController();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PlaybackPlatformPigeon.openCastDialog", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.openCastDialog();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class PlaybackListenerPigeonCodec extends StandardMessageCodec {
    public static final PlaybackListenerPigeonCodec INSTANCE = new PlaybackListenerPigeonCodec();

    private PlaybackListenerPigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return IsPlayingChangedEvent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return MediaItem.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return MediaItemTransitionEvent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return MediaMetadata.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return PictureInPictureModeChangedEvent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PlayerState.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return PositionDiscontinuityEvent.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof IsPlayingChangedEvent) {
        stream.write(128);
        writeValue(stream, ((IsPlayingChangedEvent) value).toList());
      } else if (value instanceof MediaItem) {
        stream.write(129);
        writeValue(stream, ((MediaItem) value).toList());
      } else if (value instanceof MediaItemTransitionEvent) {
        stream.write(130);
        writeValue(stream, ((MediaItemTransitionEvent) value).toList());
      } else if (value instanceof MediaMetadata) {
        stream.write(131);
        writeValue(stream, ((MediaMetadata) value).toList());
      } else if (value instanceof PictureInPictureModeChangedEvent) {
        stream.write(132);
        writeValue(stream, ((PictureInPictureModeChangedEvent) value).toList());
      } else if (value instanceof PlayerState) {
        stream.write(133);
        writeValue(stream, ((PlayerState) value).toList());
      } else if (value instanceof PositionDiscontinuityEvent) {
        stream.write(134);
        writeValue(stream, ((PositionDiscontinuityEvent) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * /////////////// Playback Listener
   *
   * Generated class from Pigeon that represents Flutter messages that can be called from Java.
   */
  public static class PlaybackListenerPigeon {
    private final BinaryMessenger binaryMessenger;

    public PlaybackListenerPigeon(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */     public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by PlaybackListenerPigeon. */
    static MessageCodec<Object> getCodec() {
      return PlaybackListenerPigeonCodec.INSTANCE;
    }
    public void onPositionDiscontinuity(@NonNull PositionDiscontinuityEvent eventArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PlaybackListenerPigeon.onPositionDiscontinuity", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(eventArg)),
          channelReply -> callback.reply(null));
    }
    public void onPlayerStateUpdate(@NonNull PlayerState eventArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PlaybackListenerPigeon.onPlayerStateUpdate", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(eventArg)),
          channelReply -> callback.reply(null));
    }
    public void onIsPlayingChanged(@NonNull IsPlayingChangedEvent eventArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PlaybackListenerPigeon.onIsPlayingChanged", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(eventArg)),
          channelReply -> callback.reply(null));
    }
    public void onMediaItemTransition(@NonNull MediaItemTransitionEvent eventArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PlaybackListenerPigeon.onMediaItemTransition", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(eventArg)),
          channelReply -> callback.reply(null));
    }
    public void onPictureInPictureModeChanged(@NonNull PictureInPictureModeChangedEvent eventArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PlaybackListenerPigeon.onPictureInPictureModeChanged", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(eventArg)),
          channelReply -> callback.reply(null));
    }
  }
}
