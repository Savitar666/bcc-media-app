// Autogenerated from Pigeon (v3.2.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class PositionUpdateEvent {
  PositionUpdateEvent({
    required this.playerId,
    this.playbackPositionMs,
  });

  String playerId;
  int? playbackPositionMs;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['playerId'] = playerId;
    pigeonMap['playbackPositionMs'] = playbackPositionMs;
    return pigeonMap;
  }

  static PositionUpdateEvent decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PositionUpdateEvent(
      playerId: pigeonMap['playerId']! as String,
      playbackPositionMs: pigeonMap['playbackPositionMs'] as int?,
    );
  }
}

class IsPlayingChangedEvent {
  IsPlayingChangedEvent({
    required this.playerId,
    required this.isPlaying,
  });

  String playerId;
  bool isPlaying;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['playerId'] = playerId;
    pigeonMap['isPlaying'] = isPlaying;
    return pigeonMap;
  }

  static IsPlayingChangedEvent decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return IsPlayingChangedEvent(
      playerId: pigeonMap['playerId']! as String,
      isPlaying: pigeonMap['isPlaying']! as bool,
    );
  }
}

class _PlaybackListenerPigeonCodec extends StandardMessageCodec {
  const _PlaybackListenerPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is IsPlayingChangedEvent) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is PositionUpdateEvent) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return IsPlayingChangedEvent.decode(readValue(buffer)!);
      
      case 129:       
        return PositionUpdateEvent.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class PlaybackListenerPigeon {
  static const MessageCodec<Object?> codec = _PlaybackListenerPigeonCodec();

  void onPositionUpdate(PositionUpdateEvent event);
  void onIsPlayingChanged(IsPlayingChangedEvent event);
  static void setup(PlaybackListenerPigeon? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PlaybackListenerPigeon.onPositionUpdate', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onPositionUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PositionUpdateEvent? arg_event = (args[0] as PositionUpdateEvent?);
          assert(arg_event != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onPositionUpdate was null, expected non-null PositionUpdateEvent.');
          api.onPositionUpdate(arg_event!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PlaybackListenerPigeon.onIsPlayingChanged', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onIsPlayingChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final IsPlayingChangedEvent? arg_event = (args[0] as IsPlayingChangedEvent?);
          assert(arg_event != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onIsPlayingChanged was null, expected non-null IsPlayingChangedEvent.');
          api.onIsPlayingChanged(arg_event!);
          return;
        });
      }
    }
  }
}
