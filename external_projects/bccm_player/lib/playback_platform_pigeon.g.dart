// Autogenerated from Pigeon (v3.2.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

enum CastConnectionState {
  _,
  noDevicesAvailable,
  notConnected,
  connecting,
  connected,
}

class MediaItem {
  MediaItem({
    required this.url,
    this.mimeType,
    this.metadata,
    this.isLive,
    this.playbackStartPositionMs,
  });

  String url;
  String? mimeType;
  MediaMetadata? metadata;
  bool? isLive;
  int? playbackStartPositionMs;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['url'] = url;
    pigeonMap['mimeType'] = mimeType;
    pigeonMap['metadata'] = metadata?.encode();
    pigeonMap['isLive'] = isLive;
    pigeonMap['playbackStartPositionMs'] = playbackStartPositionMs;
    return pigeonMap;
  }

  static MediaItem decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return MediaItem(
      url: pigeonMap['url']! as String,
      mimeType: pigeonMap['mimeType'] as String?,
      metadata: pigeonMap['metadata'] != null
          ? MediaMetadata.decode(pigeonMap['metadata']!)
          : null,
      isLive: pigeonMap['isLive'] as bool?,
      playbackStartPositionMs: pigeonMap['playbackStartPositionMs'] as int?,
    );
  }
}

class MediaMetadata {
  MediaMetadata({
    this.artworkUri,
    this.title,
    this.artist,
  });

  String? artworkUri;
  String? title;
  String? artist;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['artworkUri'] = artworkUri;
    pigeonMap['title'] = title;
    pigeonMap['artist'] = artist;
    return pigeonMap;
  }

  static MediaMetadata decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return MediaMetadata(
      artworkUri: pigeonMap['artworkUri'] as String?,
      title: pigeonMap['title'] as String?,
      artist: pigeonMap['artist'] as String?,
    );
  }
}

class ChromecastState {
  ChromecastState({
    required this.connectionState,
  });

  CastConnectionState connectionState;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['connectionState'] = connectionState.index;
    return pigeonMap;
  }

  static ChromecastState decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ChromecastState(
      connectionState: CastConnectionState.values[pigeonMap['connectionState']! as int]
,
    );
  }
}

class _PlaybackPlatformPigeonCodec extends StandardMessageCodec {
  const _PlaybackPlatformPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ChromecastState) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is MediaItem) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is MediaMetadata) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return ChromecastState.decode(readValue(buffer)!);
      
      case 129:       
        return MediaItem.decode(readValue(buffer)!);
      
      case 130:       
        return MediaMetadata.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class PlaybackPlatformPigeon {
  /// Constructor for [PlaybackPlatformPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PlaybackPlatformPigeon({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _PlaybackPlatformPigeonCodec();

  Future<String> newPlayer(String? arg_url) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.newPlayer', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_url]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as String?)!;
    }
  }

  Future<void> queueMediaItem(String arg_playerId, MediaItem arg_mediaItem) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.queueMediaItem', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_playerId, arg_mediaItem]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> replaceCurrentMediaItem(String arg_playerId, MediaItem arg_mediaItem) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.replaceCurrentMediaItem', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_playerId, arg_mediaItem]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setPrimary(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.setPrimary', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_id]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<ChromecastState?> getChromecastState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.getChromecastState', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as ChromecastState?);
    }
  }
}
