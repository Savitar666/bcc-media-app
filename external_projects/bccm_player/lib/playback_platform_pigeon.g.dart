// Autogenerated from Pigeon (v3.2.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

enum CastConnectionState {
  _,
  noDevicesAvailable,
  notConnected,
  connecting,
  connected,
}

class NpawConfig {
  NpawConfig({
    this.appName,
    this.appReleaseVersion,
    this.accountCode,
  });

  String? appName;
  String? appReleaseVersion;
  String? accountCode;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['appName'] = appName;
    pigeonMap['appReleaseVersion'] = appReleaseVersion;
    pigeonMap['accountCode'] = accountCode;
    return pigeonMap;
  }

  static NpawConfig decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return NpawConfig(
      appName: pigeonMap['appName'] as String?,
      appReleaseVersion: pigeonMap['appReleaseVersion'] as String?,
      accountCode: pigeonMap['accountCode'] as String?,
    );
  }
}

class AppConfig {
  AppConfig({
    this.appLanguage,
    this.audioLanguage,
    this.subtitleLanguage,
    this.analyticsId,
  });

  String? appLanguage;
  String? audioLanguage;
  String? subtitleLanguage;
  String? analyticsId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['appLanguage'] = appLanguage;
    pigeonMap['audioLanguage'] = audioLanguage;
    pigeonMap['subtitleLanguage'] = subtitleLanguage;
    pigeonMap['analyticsId'] = analyticsId;
    return pigeonMap;
  }

  static AppConfig decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AppConfig(
      appLanguage: pigeonMap['appLanguage'] as String?,
      audioLanguage: pigeonMap['audioLanguage'] as String?,
      subtitleLanguage: pigeonMap['subtitleLanguage'] as String?,
      analyticsId: pigeonMap['analyticsId'] as String?,
    );
  }
}

class User {
  User({
    this.id,
  });

  String? id;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    return pigeonMap;
  }

  static User decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return User(
      id: pigeonMap['id'] as String?,
    );
  }
}

class MediaItem {
  MediaItem({
    this.url,
    this.mimeType,
    this.metadata,
    this.isLive,
    this.playbackStartPositionMs,
    this.lastKnownAudioLanguage,
    this.lastKnownSubtitleLanguage,
  });

  String? url;
  String? mimeType;
  MediaMetadata? metadata;
  bool? isLive;
  double? playbackStartPositionMs;
  String? lastKnownAudioLanguage;
  String? lastKnownSubtitleLanguage;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['url'] = url;
    pigeonMap['mimeType'] = mimeType;
    pigeonMap['metadata'] = metadata?.encode();
    pigeonMap['isLive'] = isLive;
    pigeonMap['playbackStartPositionMs'] = playbackStartPositionMs;
    pigeonMap['lastKnownAudioLanguage'] = lastKnownAudioLanguage;
    pigeonMap['lastKnownSubtitleLanguage'] = lastKnownSubtitleLanguage;
    return pigeonMap;
  }

  static MediaItem decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return MediaItem(
      url: pigeonMap['url'] as String?,
      mimeType: pigeonMap['mimeType'] as String?,
      metadata: pigeonMap['metadata'] != null
          ? MediaMetadata.decode(pigeonMap['metadata']!)
          : null,
      isLive: pigeonMap['isLive'] as bool?,
      playbackStartPositionMs: pigeonMap['playbackStartPositionMs'] as double?,
      lastKnownAudioLanguage: pigeonMap['lastKnownAudioLanguage'] as String?,
      lastKnownSubtitleLanguage: pigeonMap['lastKnownSubtitleLanguage'] as String?,
    );
  }
}

class MediaMetadata {
  MediaMetadata({
    this.artworkUri,
    this.title,
    this.artist,
    this.episodeId,
    this.extras,
  });

  String? artworkUri;
  String? title;
  String? artist;
  String? episodeId;
  Map<String?, Object?>? extras;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['artworkUri'] = artworkUri;
    pigeonMap['title'] = title;
    pigeonMap['artist'] = artist;
    pigeonMap['episodeId'] = episodeId;
    pigeonMap['extras'] = extras;
    return pigeonMap;
  }

  static MediaMetadata decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return MediaMetadata(
      artworkUri: pigeonMap['artworkUri'] as String?,
      title: pigeonMap['title'] as String?,
      artist: pigeonMap['artist'] as String?,
      episodeId: pigeonMap['episodeId'] as String?,
      extras: (pigeonMap['extras'] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
    );
  }
}

class PlayerState {
  PlayerState({
    required this.playerId,
    required this.isPlaying,
    this.playbackPositionMs,
  });

  String playerId;
  bool isPlaying;
  double? playbackPositionMs;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['playerId'] = playerId;
    pigeonMap['isPlaying'] = isPlaying;
    pigeonMap['playbackPositionMs'] = playbackPositionMs;
    return pigeonMap;
  }

  static PlayerState decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PlayerState(
      playerId: pigeonMap['playerId']! as String,
      isPlaying: pigeonMap['isPlaying']! as bool,
      playbackPositionMs: pigeonMap['playbackPositionMs'] as double?,
    );
  }
}

class ChromecastState {
  ChromecastState({
    required this.connectionState,
    this.mediaItem,
  });

  CastConnectionState connectionState;
  MediaItem? mediaItem;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['connectionState'] = connectionState.index;
    pigeonMap['mediaItem'] = mediaItem?.encode();
    return pigeonMap;
  }

  static ChromecastState decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ChromecastState(
      connectionState: CastConnectionState.values[pigeonMap['connectionState']! as int]
,
      mediaItem: pigeonMap['mediaItem'] != null
          ? MediaItem.decode(pigeonMap['mediaItem']!)
          : null,
    );
  }
}

class PositionDiscontinuityEvent {
  PositionDiscontinuityEvent({
    required this.playerId,
    this.playbackPositionMs,
  });

  String playerId;
  double? playbackPositionMs;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['playerId'] = playerId;
    pigeonMap['playbackPositionMs'] = playbackPositionMs;
    return pigeonMap;
  }

  static PositionDiscontinuityEvent decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PositionDiscontinuityEvent(
      playerId: pigeonMap['playerId']! as String,
      playbackPositionMs: pigeonMap['playbackPositionMs'] as double?,
    );
  }
}

class IsPlayingChangedEvent {
  IsPlayingChangedEvent({
    required this.playerId,
    required this.isPlaying,
  });

  String playerId;
  bool isPlaying;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['playerId'] = playerId;
    pigeonMap['isPlaying'] = isPlaying;
    return pigeonMap;
  }

  static IsPlayingChangedEvent decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return IsPlayingChangedEvent(
      playerId: pigeonMap['playerId']! as String,
      isPlaying: pigeonMap['isPlaying']! as bool,
    );
  }
}

class PictureInPictureModeChangedEvent {
  PictureInPictureModeChangedEvent({
    required this.playerId,
    required this.isInPipMode,
  });

  String playerId;
  bool isInPipMode;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['playerId'] = playerId;
    pigeonMap['isInPipMode'] = isInPipMode;
    return pigeonMap;
  }

  static PictureInPictureModeChangedEvent decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PictureInPictureModeChangedEvent(
      playerId: pigeonMap['playerId']! as String,
      isInPipMode: pigeonMap['isInPipMode']! as bool,
    );
  }
}

class MediaItemTransitionEvent {
  MediaItemTransitionEvent({
    required this.playerId,
    this.mediaItem,
  });

  String playerId;
  MediaItem? mediaItem;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['playerId'] = playerId;
    pigeonMap['mediaItem'] = mediaItem?.encode();
    return pigeonMap;
  }

  static MediaItemTransitionEvent decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return MediaItemTransitionEvent(
      playerId: pigeonMap['playerId']! as String,
      mediaItem: pigeonMap['mediaItem'] != null
          ? MediaItem.decode(pigeonMap['mediaItem']!)
          : null,
    );
  }
}

class _PlaybackPlatformPigeonCodec extends StandardMessageCodec {
  const _PlaybackPlatformPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AppConfig) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is ChromecastState) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is MediaItem) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is MediaMetadata) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is NpawConfig) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
    if (value is PlayerState) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else 
    if (value is User) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return AppConfig.decode(readValue(buffer)!);
      
      case 129:       
        return ChromecastState.decode(readValue(buffer)!);
      
      case 130:       
        return MediaItem.decode(readValue(buffer)!);
      
      case 131:       
        return MediaMetadata.decode(readValue(buffer)!);
      
      case 132:       
        return NpawConfig.decode(readValue(buffer)!);
      
      case 133:       
        return PlayerState.decode(readValue(buffer)!);
      
      case 134:       
        return User.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class PlaybackPlatformPigeon {
  /// Constructor for [PlaybackPlatformPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PlaybackPlatformPigeon({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _PlaybackPlatformPigeonCodec();

  Future<String> newPlayer(String? arg_url) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.newPlayer', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_url]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as String?)!;
    }
  }

  Future<void> queueMediaItem(String arg_playerId, MediaItem arg_mediaItem) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.queueMediaItem', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_playerId, arg_mediaItem]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> replaceCurrentMediaItem(String arg_playerId, MediaItem arg_mediaItem, bool? arg_playbackPositionFromPrimary, bool? arg_autoplay) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.replaceCurrentMediaItem', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_playerId, arg_mediaItem, arg_playbackPositionFromPrimary, arg_autoplay]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setPlayerViewVisibility(int arg_viewId, bool arg_visible) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.setPlayerViewVisibility', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_viewId, arg_visible]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setPrimary(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.setPrimary', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_id]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> play(String arg_playerId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.play', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_playerId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> pause(String arg_playerId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.pause', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_playerId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> stop(String arg_playerId, bool arg_reset) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.stop', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_playerId, arg_reset]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setUser(User? arg_user) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.setUser', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_user]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setNpawConfig(NpawConfig? arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.setNpawConfig', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_config]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setAppConfig(AppConfig? arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.setAppConfig', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_config]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<PlayerState?> getPlayerState(String arg_playerId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.getPlayerState', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_playerId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as PlayerState?);
    }
  }

  Future<ChromecastState?> getChromecastState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.getChromecastState', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as ChromecastState?);
    }
  }

  Future<void> openExpandedCastController() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.openExpandedCastController', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> openCastDialog() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PlaybackPlatformPigeon.openCastDialog', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _PlaybackListenerPigeonCodec extends StandardMessageCodec {
  const _PlaybackListenerPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is IsPlayingChangedEvent) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is MediaItem) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is MediaItemTransitionEvent) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is MediaMetadata) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is PictureInPictureModeChangedEvent) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
    if (value is PlayerState) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else 
    if (value is PositionDiscontinuityEvent) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return IsPlayingChangedEvent.decode(readValue(buffer)!);
      
      case 129:       
        return MediaItem.decode(readValue(buffer)!);
      
      case 130:       
        return MediaItemTransitionEvent.decode(readValue(buffer)!);
      
      case 131:       
        return MediaMetadata.decode(readValue(buffer)!);
      
      case 132:       
        return PictureInPictureModeChangedEvent.decode(readValue(buffer)!);
      
      case 133:       
        return PlayerState.decode(readValue(buffer)!);
      
      case 134:       
        return PositionDiscontinuityEvent.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class PlaybackListenerPigeon {
  static const MessageCodec<Object?> codec = _PlaybackListenerPigeonCodec();

  void onPositionDiscontinuity(PositionDiscontinuityEvent event);
  void onPlayerStateUpdate(PlayerState event);
  void onIsPlayingChanged(IsPlayingChangedEvent event);
  void onMediaItemTransition(MediaItemTransitionEvent event);
  void onPictureInPictureModeChanged(PictureInPictureModeChangedEvent event);
  static void setup(PlaybackListenerPigeon? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PlaybackListenerPigeon.onPositionDiscontinuity', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onPositionDiscontinuity was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PositionDiscontinuityEvent? arg_event = (args[0] as PositionDiscontinuityEvent?);
          assert(arg_event != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onPositionDiscontinuity was null, expected non-null PositionDiscontinuityEvent.');
          api.onPositionDiscontinuity(arg_event!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PlaybackListenerPigeon.onPlayerStateUpdate', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onPlayerStateUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PlayerState? arg_event = (args[0] as PlayerState?);
          assert(arg_event != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onPlayerStateUpdate was null, expected non-null PlayerState.');
          api.onPlayerStateUpdate(arg_event!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PlaybackListenerPigeon.onIsPlayingChanged', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onIsPlayingChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final IsPlayingChangedEvent? arg_event = (args[0] as IsPlayingChangedEvent?);
          assert(arg_event != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onIsPlayingChanged was null, expected non-null IsPlayingChangedEvent.');
          api.onIsPlayingChanged(arg_event!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PlaybackListenerPigeon.onMediaItemTransition', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onMediaItemTransition was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MediaItemTransitionEvent? arg_event = (args[0] as MediaItemTransitionEvent?);
          assert(arg_event != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onMediaItemTransition was null, expected non-null MediaItemTransitionEvent.');
          api.onMediaItemTransition(arg_event!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PlaybackListenerPigeon.onPictureInPictureModeChanged', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onPictureInPictureModeChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PictureInPictureModeChangedEvent? arg_event = (args[0] as PictureInPictureModeChangedEvent?);
          assert(arg_event != null, 'Argument for dev.flutter.pigeon.PlaybackListenerPigeon.onPictureInPictureModeChanged was null, expected non-null PictureInPictureModeChangedEvent.');
          api.onPictureInPictureModeChanged(arg_event!);
          return;
        });
      }
    }
  }
}
