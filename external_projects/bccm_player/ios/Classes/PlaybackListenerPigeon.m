// Autogenerated from Pigeon (v3.2.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "PlaybackListenerPigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface PositionUpdateEvent ()
+ (PositionUpdateEvent *)fromMap:(NSDictionary *)dict;
+ (nullable PositionUpdateEvent *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation PositionUpdateEvent
+ (instancetype)makeWithPlaybackPositionMs:(nullable NSNumber *)playbackPositionMs {
  PositionUpdateEvent* pigeonResult = [[PositionUpdateEvent alloc] init];
  pigeonResult.playbackPositionMs = playbackPositionMs;
  return pigeonResult;
}
+ (PositionUpdateEvent *)fromMap:(NSDictionary *)dict {
  PositionUpdateEvent *pigeonResult = [[PositionUpdateEvent alloc] init];
  pigeonResult.playbackPositionMs = GetNullableObject(dict, @"playbackPositionMs");
  return pigeonResult;
}
+ (nullable PositionUpdateEvent *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [PositionUpdateEvent fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"playbackPositionMs" : (self.playbackPositionMs ?: [NSNull null]),
  };
}
@end

@interface PlaybackListenerPigeonCodecReader : FlutterStandardReader
@end
@implementation PlaybackListenerPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [PositionUpdateEvent fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface PlaybackListenerPigeonCodecWriter : FlutterStandardWriter
@end
@implementation PlaybackListenerPigeonCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[PositionUpdateEvent class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface PlaybackListenerPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PlaybackListenerPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PlaybackListenerPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PlaybackListenerPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PlaybackListenerPigeonGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    PlaybackListenerPigeonCodecReaderWriter *readerWriter = [[PlaybackListenerPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface PlaybackListenerPigeon ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation PlaybackListenerPigeon

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onPositionUpdate:(PositionUpdateEvent *)arg_event completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.PlaybackListenerPigeon.onPositionUpdate"
      binaryMessenger:self.binaryMessenger
      codec:PlaybackListenerPigeonGetCodec()];
  [channel sendMessage:@[arg_event ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
